//webrtc/page.tsx
'use client'

import { VideoCallApp } from './VideoCallApp'
import { useEffect, useState } from 'react'
import { checkWebRTCSupport, getBrowserName, getDeviceInfo } from './lib/webrtc'
import styles from './styles.module.css'

export default function WebRTCPage() {
    const [isSupported, setIsSupported] = useState<boolean | null>(null)
    const [mediaAccess, setMediaAccess] = useState<{
        status: 'granted' | 'denied' | 'prompt' | 'not_found' | 'unknown'
        error?: string
        devices?: MediaDeviceInfo[]
    }>({ status: 'unknown' })
    const [browserName, setBrowserName] = useState<string>('')
    const [isChecking, setIsChecking] = useState(false)

    useEffect(() => {
        const initialize = async () => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ WebRTC
            const supported = checkWebRTCSupport()
            setIsSupported(supported)
            setBrowserName(getBrowserName())

            if (supported) {
                await checkMediaAccess()
                startAutoRefresh()
            }
        }

        initialize()

        return () => {
            stopAutoRefresh()
        }
    }, [])

    const startAutoRefresh = () => {
        const interval = setInterval(() => {
            if (mediaAccess.status === 'denied') {
                checkMediaAccess()
            }
        }, 10000) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        return () => clearInterval(interval)
    }

    const stopAutoRefresh = () => {
        clearInterval(startAutoRefresh as unknown as number)
    }

    const checkMediaAccess = async () => {
        setIsChecking(true)
        try {
            const devices = await navigator.mediaDevices.enumerateDevices()
            const hasVideo = devices.some(d => d.kind === 'videoinput')
            const hasAudio = devices.some(d => d.kind === 'audioinput')

            if (!hasVideo || !hasAudio) {
                setMediaAccess({
                    status: 'not_found',
                    error: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                    devices
                })
                return
            }

            const stream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            })
            stream.getTracks().forEach(track => track.stop())

            setMediaAccess({
                status: 'granted',
                devices: await getDeviceInfo()
            })
        } catch (err: any) {
            console.error('Media access error:', err)
            setMediaAccess({
                status: err.name === 'NotAllowedError' ? 'denied' : 'not_found',
                error: err.message,
                devices: await navigator.mediaDevices.enumerateDevices()
            })
        } finally {
            setIsChecking(false)
        }
    }

    const handleRetry = async () => {
        await checkMediaAccess()
    }

    const handleOpenSettings = () => {
        if (browserName === 'Chrome') {
            window.open('chrome://settings/content/camera')
            window.open('chrome://settings/content/microphone')
        } else if (browserName === 'Firefox') {
            window.open('about:preferences#privacy')
        } else if (browserName === 'Safari') {
            window.open('x-apple.systempreferences:com.apple.preference.security?Privacy_Camera')
            window.open('x-apple.systempreferences:com.apple.preference.security?Privacy_Microphone')
        } else if (browserName === 'Edge') {
            window.open('edge://settings/content/camera')
            window.open('edge://settings/content/microphone')
        }
    }

    if (isSupported === false) {
        return (
            <div className={styles.errorContainer}>
                <h1>WebRTC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ</h1>
                <p>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebRTC:</p>

                <div className={styles.browserGrid}>
                    <div className={styles.browserCard}>
                        <img src="/browsers/chrome.png" alt="Chrome" width={64} height={64} />
                        <h3>Google Chrome</h3>
                        <a href="https://www.google.com/chrome/" target="_blank">–°–∫–∞—á–∞—Ç—å</a>
                    </div>
                    <div className={styles.browserCard}>
                        <img src="/browsers/firefox.png" alt="Firefox" width={64} height={64} />
                        <h3>Mozilla Firefox</h3>
                        <a href="https://www.mozilla.org/firefox/" target="_blank">–°–∫–∞—á–∞—Ç—å</a>
                    </div>
                    <div className={styles.browserCard}>
                        <img src="/browsers/edge.png" alt="Edge" width={64} height={64} />
                        <h3>Microsoft Edge</h3>
                        <a href="https://www.microsoft.com/edge" target="_blank">–°–∫–∞—á–∞—Ç—å</a>
                    </div>
                </div>
            </div>
        )
    }

    if (mediaAccess.status === 'denied' || mediaAccess.status === 'not_found') {
        return (
            <div className={styles.errorContainer}>
                <h1>
                    {mediaAccess.status === 'denied'
                        ? '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω'
                        : '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                </h1>

                <div className={styles.solutionBox}>
                    <h2>–†–µ—à–µ–Ω–∏–µ –¥–ª—è {browserName}:</h2>

                    {browserName === 'Chrome' && (
                        <ol>
                            <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ <strong>üîí –ó–∞–º–æ–∫</strong> –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ</li>
                            <li>–í —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö –≤—ã–±–µ—Ä–∏—Ç–µ <strong>"–†–∞–∑—Ä–µ—à–∏—Ç—å"</strong> –¥–ª—è –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</li>
                            <li>–ò–ª–∏ <button onClick={handleOpenSettings}>–æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome</button></li>
                            <li>–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫</li>
                        </ol>
                    )}

                    {browserName === 'Firefox' && (
                        <ol>
                            <li>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ <strong>üîí –ó–∞–º–æ–∫</strong> –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ</li>
                            <li>–í—ã–±–µ—Ä–∏—Ç–µ <strong>"–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"</strong></li>
                            <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <strong>"–†–∞–∑—Ä–µ—à–∏—Ç—å"</strong> –¥–ª—è –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞</li>
                            <li>–ò–ª–∏ <button onClick={handleOpenSettings}>–æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firefox</button></li>
                        </ol>
                    )}

                    {mediaAccess.status === 'not_found' && (
                        <div className={styles.deviceWarning}>
                            <p>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</p>
                            <ul>
                                {mediaAccess.devices?.map(device => (
                                    <li key={device.deviceId}>
                                        {device.label || `–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${device.kind}`} ({device.kind})
                                    </li>
                                ))}
                            </ul>
                            <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.</p>
                        </div>
                    )}

                    <div className={styles.actions}>
                        <button
                            onClick={handleRetry}
                            disabled={isChecking}
                            className={styles.primaryButton}
                        >
                            {isChecking ? (
                                <span className={styles.spinner}></span>
                            ) : (
                                '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞'
                            )}
                        </button>
                        <button
                            onClick={() => window.location.reload()}
                            className={styles.secondaryButton}
                        >
                            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        </button>
                    </div>
                </div>
            </div>
        )
    }

    return (
        <main className={styles.container}>
            {isSupported === null || mediaAccess.status === 'unknown' ? (
                <div className={styles.loadingScreen}>
                    <div className={styles.loadingAnimation}>
                        <div className={styles.cameraIcon}></div>
                        <div className={styles.progressBar}>
                            <div className={styles.progress}></div>
                        </div>
                    </div>
                    <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º...</p>
                </div>
            ) : (
                <VideoCallApp devices={mediaAccess.devices} />
            )}
        </main>
    )
}